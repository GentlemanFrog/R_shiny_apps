edge_matrix <- read.csv("Ecoli_Regulatory_Network.txt", sep = "\t")[,-2] %<% as.matrix
dataframe2 <- read.csv("Ecoli_Regulatory_Network.txt", sep = "\t")[, -2] %>% as.matrix
#Zadanie 1:
library(dplyr)
dataframe2 <- read.csv("Ecoli_Regulatory_Network.txt", sep = "\t")[, -2] %>% as.matrix
zad_1graph <- igraph::graph_from_edgelist(dataframe2)
View(zad_1graph)
graph_stopien <- igraph::degree(zad1_graph)
graph_stopien <- igraph::degree(zad_1graph)
graph_transitivity <- igraph::transitivity(zad_1graph, type = "local")
#Usunięcie wartości nan, zamiana na zero
graph_transitivity(is.nan[graph_transitivity])<-0
#Usunięcie wartości nan, zamiana na zero
graph_transitivity(is.na[graph_transitivity]) <- 0
#Usunięcie wartości nan, zamiana na zero
graph_transitivity(is.na[graph_transitivity]) <- 0
#Usunięcie wartości nan, zamiana na zero
graph_transitivity[is.na(graph_transitivity)] <- 0
#wykres zależności dtopnia wierzchołka od współczynnika klasteryzacji
plot(log(graph_transitivity, base = 10),
log(graph_stopien, base = 10),
main = "Zależność stopnia wierzchołka od współczynnika klasteryzacji",
ylab = "Log10 ze stopnia wierzchołka",
xlab = "Log10 ze współczynnika klasteryzacji")
View(dataframe2)
View(dataframe)
#Zadanie 2:
#średnia długosc ścieżki w cytoscape: 3.767 dla orginalnej sieci
Ecoli_csv <- read.csv("EcoliNetwork.csv", sep=",")
View(Ecoli_csv)
Ecoli_csv_mean<-mean(Ecoli_csv$AverageShortestPathLength)
Ecoli_csv_mean
#Zadanie 2:
#średnia długosc ścieżki w cytoscape: 3.767 dla orginalnej sieci
Ecoli_csv <- read.csv("Ecoli_Regulatory_Network.txt deafult node.csv", sep="\t")
#Zadanie 2:
#średnia długosc ścieżki w cytoscape: 3.767 dla orginalnej sieci
Ecoli_csv <- read.csv("Ecoli_Regulatory_Network.txt deafult node.csv", sep=",")
#Zadanie 2:
#średnia długosc ścieżki w cytoscape: 3.767 dla orginalnej sieci
Ecoli_csv <- read.csv("Ecoli_Regulatory_Network.txt deafult node.csv", sep=",")
#Zadanie 2:
#średnia długosc ścieżki w cytoscape: 3.767 dla orginalnej sieci
Ecoli_csv <- read.csv("Ecoli_Regulatory_Network.txt deafult node.csv", sep=",")
#Zadanie 2:
#średnia długosc ścieżki w cytoscape: 3.767 dla orginalnej sieci
Ecoli_csv <- read.csv("Ecoli_Regulatory_Network.txt default node.csv", sep=",")
Ecoli_csv_mean<-mean(Ecoli_csv$AverageShortestPathLength)
View(Ecoli_csv_mean)
zad2_matrix <- read.csv("Ecoli_Regulatory_Network.txt", sep = "\t")[,-2] %>% as.matrix
zad2_graph <- igraph::graph_from_edgelist(zad2_matrix, directed = F)
zad2_mean<-igraph::average.path.length(zad2_graph)
view(zad2_mean)
View(zad2_mean)
Ecoli_mean_degree <- mean(Ecoli_csv$Degree)
View(Ecoli_mean_degree)
zad3_mean_degree <- mean(igraph::degree(zad2_graph))
View(zad3_mean_degree)
plot(sort(igraph::degree(zad2_graph), decreasing = TRUE), log = "xy")
#Zadanie 1:
library(dplyr)
dataframe2 <- read.csv("Ecoli_Regulatory_Network.txt", sep = "\t")[, -2] %>% as.matrix
zad_1graph <- igraph::graph_from_edgelist(dataframe2)
graph_stopien <- igraph::degree(zad_1graph)
graph_transitivity <- igraph::transitivity(zad_1graph, type = "local")
#Usunięcie wartości nan, zamiana na zero
graph_transitivity[is.na(graph_transitivity)] <- 0
#wykres zależności dtopnia wierzchołka od współczynnika klasteryzacji
plot(log(graph_stopien, base = 10),
graph_transitivity,
main = "Zależność stopnia wierzchołka od współczynnika klasteryzacji",
xlab = "Log10 ze stopnia wierzchołka",
ylab = "Log10 ze współczynnika klasteryzacji")
Ecoli_mean_degree <- mean(Ecoli_csv$Degree)
View(Ecoli_mean_degree)
zad3_mean_degree <- mean(igraph::degree(zad2_graph))
View(zad3_mean_degree)
stopien <- log(sort(igraph::degree(zad2_graph), decresing = TURE))
stopien <- log(sort(igraph::degree(zad2_graph), decreasing = TRUE))
indeksy <- log(1:lenght(stopien))
stopien
indeksy
indeksy
indeksy <- log(1:lenght(stopien))
indeksy <- log(1:length(stopien))
stopien
indeksy
linearMod <- lm(stopnie ~ indeksy)
stopnie <- log(sort(igraph::degree(zad2_graph), decreasing = TRUE))
indeksy <- log(1:length(stopien))
stopien
indeksy
linearMod <- lm(stopnie ~ indeksy)
plot(indeksy, stopnie, xlab = "Node rank", ylab = "Stopien k")
abline(lineraMod, col = "green")
abline(linearMod, col = "green")
plot(indeksy, stopnie, xlab = "Node rank", ylab = "Stopien k")
linearMod
gamma_r <- abs(coefficients(linearMod)[2])
gamma_r
#gamma:
gamma <- (1+(1/gamma_r))
gamma
occurs <- function(x, v) {
ret <- 0
for (i in v) {
if (i == x)
ret <- ret + 1
}
return(ret)
}
zliczenia <- (function(v) {
res <- c()
for (i in 1:length(v)) {
res[i] <- occurs(v[i], v)
}
return(res)
})(log(Ecoli_csv$EdgeCount %>% as.numeric))
linearMod2 <- lm(log(zliczenia) ~ log(Ecoli_csv$EdgeCount))
plot(log(Ecoli_csv$EdgeCount), log(zliczenia))
abline(linearMod2)
abline(linearMod2, col = "green")
gamma2 <- abs(coefficients(linearMod2)[2])
gamma2
linearMod <- lm(stopnie ~ indeksy)
plot(indeksy, stopnie, xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
linearMod <- lm(stopnie[10:150] ~ indeksy[10:150])
plot(indeksy[10:150], stopnie[10:150], xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
linearMod <- lm(stopnie[20:150] ~ indeksy[20:150])
plot(indeksy[20:150], stopnie[20:150], xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
gamma2
gamma_r
gamma
linearMod2 <- lm(log(zliczenia) ~ log(Ecoli_csv$EdgeCount))
plot(log(Ecoli_csv$EdgeCount), log(zliczenia))
abline(linearMod2, col = "green")
linearMod2 <- lm(log(zliczenia[1:30]) ~ log(Ecoli_csv$EdgeCount[1:30]))
plot(log(Ecoli_csv$EdgeCount[1:30]), log(zliczenia[1:30]))
abline(linearMod2, col = "green")
gamma_r2 <- abs(coefficients(linearMod3)[2])
linearMod3 <- lm(stopnie[20:150] ~ indeksy[20:150])
plot(indeksy[20:150], stopnie[20:150], xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
gamma_r2 <- abs(coefficients(linearMod3)[2])
gamma_r2
gamma3 <- (1+(1/gamma_r2))
gamma3
linearMod4 <- lm(log(zliczenia[1:30]) ~ log(Ecoli_csv$EdgeCount[1:30]))
plot(log(Ecoli_csv$EdgeCount[1:30]), log(zliczenia[1:30]))
abline(linearMod2, col = "green")
gamma4 <- abs(coefficients(linerMod4)[2])
linearMod4 <- lm(log(zliczenia[1:30]) ~ log(Ecoli_csv$EdgeCount[1:30]))
plot(log(Ecoli_csv$EdgeCount[1:30]), log(zliczenia[1:30]))
abline(linearMod2, col = "green")
gamma4 <- abs(coefficients(linerMod4)[2])
gamma4 <- abs(coefficients(linearMod4)[2])
gamma4
gamma_r <- abs(coefficients(linearMod)[2])
gamma_r
#gamma ze wzoru:
gamma <- (1+(1/gamma_r))
gamma
linearMod <- lm(stopnie ~ indeksy)
plot(indeksy, stopnie, xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
occurs <- function(x, v) {
ret <- 0
for (i in v) {
if (i == x)
ret <- ret + 1
}
return(ret)
}
zliczenia <- (function(v) {
res <- c()
for (i in 1:length(v)) {
res[i] <- occurs(v[i], v)
}
return(res)
})(log(Ecoli_csv$EdgeCount %>% as.numeric))
linearMod2 <- lm(log(zliczenia) ~ log(Ecoli_csv$EdgeCount))
plot(log(Ecoli_csv$EdgeCount), log(zliczenia))
abline(linearMod2, col = "green")
gamma2 <- abs(coefficients(linearMod2)[2])
gamma2
linearMod3 <- lm(stopnie[20:150] ~ indeksy[20:150])
plot(indeksy[20:150], stopnie[20:150], xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
gamma_r2 <- abs(coefficients(linearMod3)[2])
gamma_r2
gamma3 <- (1+(1/gamma_r2))
gamma3
linearMod4 <- lm(log(zliczenia[1:30]) ~ log(Ecoli_csv$EdgeCount[1:30]))
plot(log(Ecoli_csv$EdgeCount[1:30]), log(zliczenia[1:30]))
abline(linearMod2, col = "green")
linearMod3 <- lm(stopnie[20:150] ~ indeksy[20:150])
plot(indeksy[20:150], stopnie[20:150], xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
linearMod3 <- lm(stopnie[50:150] ~ indeksy[50:150])
plot(indeksy[50:150], stopnie[50:150], xlab = "Node rank", ylab = "Stopien k")
abline(linearMod, col = "green")
linearMod3 <- lm(stopnie[50:150] ~ indeksy[50:150])
plot(indeksy[50:150], stopnie[50:150], xlab = "Node rank", ylab = "Stopien k")
abline(linearMod3, col = "green")
gamma_r2 <- abs(coefficients(linearMod3)[2])
gamma_r2
gamma3 <- (1+(1/gamma_r2))
gamma3
linearMod4 <- lm(log(zliczenia[1:30]) ~ log(Ecoli_csv$EdgeCount[1:30]))
plot(log(Ecoli_csv$EdgeCount[1:30]), log(zliczenia[1:30]))
abline(linearMod4, col = "green")
linearMod4 <- lm(log(zliczenia[10:20]) ~ log(Ecoli_csv$EdgeCount[1:20]))
plot(log(Ecoli_csv$EdgeCount[10:20]), log(zliczenia[10:20]))
abline(linearMod4, col = "green")
gamma4 <- abs(coefficients(linearMod4)[2])
gamma4
linearMod4 <- lm(log(zliczenia[10:20]) ~ log(Ecoli_csv$EdgeCount[1:20]))
linearMod4 <- lm(log(zliczenia[9:24]) ~ log(Ecoli_csv$EdgeCount[9:24]))
plot(log(Ecoli_csv$EdgeCount[9:24]), log(zliczenia[9:24]))
abline(linearMod4, col = "green")
gamma4 <- abs(coefficients(linearMod4)[2])
gamma4
hist(dane)
dane = c(180, 180, 200, 205, 210, 210, 215, 220, 225, 230, 230, 230, 235, 235, 240, 240, 245, 250, 260, 280)
hist(dane)
dane = c(180, 180, 200, 205, 210, 210, 215, 220, 225, 230, 230, 230, 235, 235, 240, 240, 245, 250, 260, 280)
hist(, right = FALSE)
dane = c(180, 180, 200, 205, 210, 210, 215, 220, 225, 230, 230, 230, 235, 235, 240, 240, 245, 250, 260, 280)
hist(dane, right = FALSE)
hist(dane, breaks = c(180, 230, 280))
h = hist(dane, plot = FALSE)
names(h)
h$counts
h$mids#
h = hist(dane)
lines(h$mids, h$counts, type="l")
h = hist(dane, plot = FALSE)
h$counts = h$counts / sum(h$counts)
plot(h)
#utworzenie wykresu gęstości:
d = density(dane)
plot(d)
names(d)
hist(dane, prob = TRUE, col = "grey")
lines(d$x, d$y, col = "red")
# rysowanie dytrybuanty
plot(ecdf(dane))
#inny sposób prezentowania danych stripchart
stripchart(dane)
stripchart(dane, method = "jitter")
stripchart(dane, method = "stack")
#inny sposób prezentowania danych stripchart
stripchart(dane)
stripchart(dane, method = "jitter")
stripchart(dane, method = "stack")
stripchart(dane, method = "stack", xlab = "x axis",
ylab = "y axis", main = "my title", color = "darkgreen")
stripchart(dane, method = "stack", xlab = "x axis",
ylab = "y axis", main = "my title", color = "darkgreen")
stripchart(dane, method = "stack", xlab = "x axis",
ylab = "y axis", main = "my title", color = "darkgreen")
stripchart(dane, method = "stack", xlab = "x axis", ylab = "y axis", main = "my title", color = "darkgreen")
stripchart(dane, method = "stack", xlab = "x axis", ylab = "y axis", color = "darkgreen")
#liczenie średniej dla wektora danych
mean(dane)
x = c(10, 20, 30, 40, 50, 60)
n = c(2, 1, 2, 3, 1, 1)
weighted.mean(x, n)
x = scan("http://combio.pl/files/p53expression.txt")
x = scan("http://combio.pl/files/p53expression.txt")
summary(x)
boxplot(x)
install.packages("vioplot")
install.packages("vioplot")
install.packages("UsingR")
library(UsingR)
pi2000
hist
hist(pi2000)
x = c(1, 8, 2, 6, 3, 8, 5, 5, 5, 5)
mean(x)
median(x)
sd(x)
z-score = (x - mean(x))/sd(x)
z_score = (x - mean(x))/sd(x)
z_score=(x-mean(x))/sd(x)
show(z_score)
scale(x)
diff(range(x))
var(x)
sd(x)
dbinom(10, 4, 0.5)
dbinom(4, 10, 0.5)
1-pbibnom(3, 10, 0.5)
1-pbinom(3, 10, 0.5)
pbinom(6, 10, 0.5)
pbinom(4, 10, 0.5)
dane_zad3=read.csv("http://www.combio.pl/files/p53_mouse.csv")
View(dane_zad3)
View(dane_zad3)
shapiro.test(dane_zad3)
shapiro.test(dane_zad3$wt)
shapiro.test(dane_zad3$mut)
#zad3
dane_zad3=read.csv("http://www.combio.pl/files/p53_mouse.csv")
shapiro.test(dane_zad3$wt)
shapiro.test(dane_zad3$mut)
wilcox.test(dane_zad3$mut, dane_zad3$wt,
conf.level = 0.99, alternative = "less")
x = c(1, 8, 2, 6, 3, 8, 5, 5, 5, 5)
mean(days)
#zad4
days = c(1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7)
mean(days)
m=mean(days)
t.test(days, mu=m)
t.test(days, mu=3)
#Zad 5
machine = c(68, 82, 94, 106, 92, 80, 76, 74, 110, 93, 86, 65, 74, 84, 100)
doctor = c(72, 84, 89, 100, 97, 88, 84, 70, 103, 84, 86, 63, 69, 87, 93)
shapiro.test(machine)
shapiro.test(doctor)
t.test(machine, doctor, paired = TRUE)
t.test(machine, doctor, paired = TRUE, alternative = "less")
#Zad 6
chisq.test(c(38, 72, 40), p=c(0.2, 0.3, 0.5))
#Zad 6
chisq.test(c(38, 72, 40), p=c(0.2, 0.5, 0.3))
#Zad 7
x = read.csv("http://www.combio.pl/files/student_weights.csv")
View(x)
shapiro.test(x$before)
shapiro.test(x$after)
t.test(x$before, x$after, paired = TRUE, alternative = "less")
#Zad8
y = read.csv("http://www.combio.pl/files/bacteria.csv")
View(y)
y$pathogenic
shapiro.test(y$pathogenic)
shapiro.test(y$normal)
var.test(y$pathogenic)
var.test(y$pathogenic, y$normal)
t.test(y$pathogenic, y$normal, var.equal = TRUE)
t.test(y$pathogenic, y$normal, var.equal = TRUE, alternative = "greater")
x = read.csv("http://www.combio.pl/files/exam.csv")
View(x)
a = read.csv("http://www.combio.pl/files/exam.csv")
cor(a$hours, a$points)
show(a)
cor(a$hours, a$points)
with(a, lm(points~hours))
model(a, lm(points~hours))
model = lm(formula = points~hours, data = a)
View(model)
View(model)
model
summary(model)
predict(model, data.frame(hours=c(5)))
#zad2
m = read.csv("http://www.combio.pl/files/mice.csv")
View(m)
shapiro.test(m$WT)
shapiro.test(m$MUT)
var.test(m$WT, m$MUT)
t.test(m$WT, m$MUT, var.equal = F)
tet = read.csv("http://www.combio.pl/files/pulse.csv")
View(tet)
shapiro.test(tet$before)
shapiro.test(tet$after)
t.test(tet$before, tet$after, paired = T, alternative = "less", conf.level = .99)
owa = read.csv("http://www.combio.pl/files/InsectSprays.csv")
owa = read.csv("http://www.combio.pl/files/InsectSprays.csv")
View(owa)
bartlett.test(owa$count~owa$spray)
kruskal.test(owa$count~owa$spray)
pairwise.wilcox.test(owa$count, owa$spray, exact=F)
seadeep = c(862, 870, 876, 866, 871)
seaDeep = c(862, 870, 876, 866, 871)
t.test(seaDeep, mu = 870, conf.level = .99)
#Do tych zadań niezbędne jest zainstalowanei paczki lavaan
#install.packages("lavaan", dependencies=TRUE)
#odpalamy paczke w środowisku:
library(lavaanPlot)
install.packages("lavaanPlot")
install.packages("lavaan")
remove.packages("lavaan")
install.packages("lavaanPLot")
install.packages("lavaanPlot")
install.packages("DiagrammeR")
library(gluea)
library(glue)
remove.packages("glue")
remove.packages("glue")
install.packages("DiagrammeR", dependencies = TRUE, clean = TRUE)
install.packages("DiagrammeR", dependencies = TRUE, clean = TRUE)
old.packages()
update.packages("glue")
old.packages()
library(glue)
install.packages("glue", dependencies = TRUE, clean = TRUE)
install.packages("glue", dependencies = TRUE, clean = TRUE)
old.packages()
install.packages("installr")
library(installr)
updateR()
r
R.version()
R.version
setwd("C:/Users/Alek/Desktop/Github_commits/R_shiny_apps")
#Loding data:
library(shiny)
library(shinythemes)
library(randomForest)
library(RCurl)
library(caret)
install.packages("caret")
library(caret)
# Importing the data:
data("iris")
force(iris)
# Splitting the data for the test and learn part of data:
# We used 20% of the data for the test and the 80% fo the learn
TrainIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE)
TrainSet <- iris[TrainIndex]
# Saving the data to csvs:
write.csv(TrainSet, "iris_train_set.csv")
write.csv(TestSet, "iris_test_set.csv")
# Saving the data to csvs:
write.csv(TrainSet, "iris_train_set.csv")
TestSet<- iris[-TrainIndex]
write.csv(TestSet, "iris_test_set.csv")
# Reding the setted data:
to_train <- read.csv("iris_train_set.csv")
# Reading the prepered data:
to_train <- read.csv("iris_train_set.csv", header = TRUE)
# Removing first line from the train set because its not needed:
to_train <- to_train[-1]
View(to_train)
# Splitting the data for the test and learn part of data:
# We used 20% of the data for the test and the 80% fo the learn
TrainIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE)
TrainSet <- iris[TrainIndex,]
TestSet<- iris[-TrainIndex,]
# Saving the data to csvs:
write.csv(TrainSet, "iris_train_set.csv")
write.csv(TestSet, "iris_test_set.csv")
# Saving the data to csvs:
write.csv(TrainSet, "iris_train_set.csv")
write.csv(TestSet, "iris_test_set.csv")
#
TrainSet <- iris[TrainIndex,]
View(iris)
# Creating a model: mtry is set to 4 because we want to base on 4 other features
# to predict the species
model<-randomForest(Species ~ ., data = to_train, ntree = 500,
mtry = 4, importance = TRUE)
View(to_train)
View(to_train)
# Reading the prepered data:
to_train <- read.csv("iris_train_set.csv", header = TRUE)
# Removing first line from the train set because its not needed:
to_train <- to_train[-1]
# Creating a model: mtry is set to 4 because we want to base on 4 other features
# to predict the species
model<-randomForest(Species ~ ., data = to_train, ntree = 500,
mtry = 4, importance = TRUE)
# Creating a model: mtry is set to 4 because we want to base on 4 other features
# to predict the species
model<-randomForest(as.factor(Species) ~ ., data = to_train, ntree = 500,
mtry = 4, importance = TRUE)
# Saving the model:
saveRDS(model, "iris_random_forest_model.rds")
min(iris$Sepal.Length)
max(iris$Sepal.Length)
median(iris$Sepal.Length)
median(iris$Sepal.Width)
min(iris$Sepal.Width)
max(iris$Sepal.Width)
max(iris$Petal.Length.Width)
max(iris$Petal.Length)
min(iris$Petal.Length)
median(iris$Petal.Length)
median(iris$Petal.Width)
max(iris$Petal.Width)
min(iris$Petal.Width)
runApp('predict_iris.R')
View(model)
View(to_train)
# Reading the prepered data:
to_train <- read.csv("iris_train_set.csv", header = TRUE)
# Removing first line from the train set because its not needed:
to_train <- to_train[-1]
View(to_train)
# Creating a model: mtry is set to 4 because we want to base on 4 other features
# to predict the species, also its crucial to set the species as factor to make
# the model work because the species feature its not numeric nor logical.
model<-randomForest(as.factor(Species) ~ ., data = to_train, ntree = 500,
mtry = 4, importance = TRUE)
# Saving the model:
saveRDS(model, "iris_random_forest_model.rds")
runApp('predict_iris.R')
runApp('predict_iris.R')
runApp('predict_iris.R')
runApp('predict_iris.R')
runApp('predict_iris.R')
runApp('predict_iris.R')
runApp('predict_iris.R')
runApp('predict_iris.R')
runApp('predict_iris.R')
